---
import Layout from '../layouts/Layout.astro';
import LoginPage from '../components/Login.svelte';
import Header from '../components/Header.svelte';
import { isValidEmail } from '../lib/lucia-email';
import { lucia } from '../lib/lucia';
import { Argon2id } from 'oslo/password';
import { DB_ADAPTER } from '../lib/db';
import { userTable } from '../lib/schema';
import { eq } from 'drizzle-orm';

let redirect = false;
let emailInput = '';
let errorMessage = 'None';
let respStatus = 200;

if (Astro.request.method === 'POST') {
    const DATA = await Astro.request.json();
    const email = DATA.email;
    const password = DATA.password;
    if (typeof email === 'string') {
        emailInput = email;
    }
    const validPassword = typeof password === 'string' && password.length >= 1 && password.length <= 255;
    if (isValidEmail(email) && validPassword) {
        try {
            const EXISTING_USER = await DB_ADAPTER.select().from(userTable).where(eq(userTable.email, email));
            const VALID = await new Argon2id().verify(EXISTING_USER[0].hashed_password || '', password);

            if (!VALID) {
                throw Error('Incorrect username or password');
            }

            const SESSION = await lucia.createSession(EXISTING_USER[0].id, {});
            const COOKIE = await lucia.createSessionCookie(SESSION.id);
            Astro.cookies.set(COOKIE.name, COOKIE.value, COOKIE.attributes);

            redirect = true;
        } catch (e: any) {
            if (e.message === 'AUTH_INVALID_KEY_ID' || e.message === 'AUTH_INVALID_PASSWORD') {
                errorMessage = 'Wrong Email or Password';
            } else {
                console.log(e);
                errorMessage = 'Unknown Error';
            }
        }
    } else {
        errorMessage = 'Invalid Input';
    }
    return new Response(
        JSON.stringify({
            status: respStatus,
            error: errorMessage,
            needsRedirect: redirect
        }),
        {
            status: respStatus
        }
    );
}

const session = await Astro.locals.auth.validate();
if (session) {
    if (!session.user.emailVerified) {
        return Astro.redirect('/verify/email');
    }
    return Astro.redirect('/');
}
---

<Layout title="Login">
    <Header client:visible />
    <div transition:animate="slide" class="flex flex-1 justify-center items-center h-full">
        <LoginPage client:visible />
    </div>
</Layout>
