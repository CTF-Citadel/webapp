---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.svelte';
import PasswordReset from '../../components/PasswordReset.svelte';
import { validatePasswordResetToken, isValidPasswordResetToken } from "../../lib/lucia-db";
import { lucia } from '../../lib/lucia';
import { DB_ADAPTER } from '../../lib/db';
import { userTable } from '../../lib/schema';
import { eq } from 'drizzle-orm';
import { Argon2id } from 'oslo/password';

const { id } = Astro.params;
let errorMessage = 'None';
let respStatus = 200;

const VALID = await isValidPasswordResetToken(id || "");
if (!VALID) {
    return new Response("Invalid or Expired Token!", {
        status: 401
    });
}

if (Astro.request.method === 'POST') {
    const DATA = await Astro.request.json();
    const USER_ID = await validatePasswordResetToken(id || "");
    if (!USER_ID) {
        return new Response("Invalid or Expired Token!", {
            status: 401
        });
    }
    const password = DATA.password;
    await lucia.invalidateUserSessions(USER_ID);
    Astro.cookies.delete(lucia.sessionCookieName);

    const HASH_PASS = await new Argon2id().hash(password);
    await DB_ADAPTER.update(userTable).set({
        hashed_password: HASH_PASS
    }).where(eq(userTable.id, USER_ID));

    return new Response(
        JSON.stringify({
            status: respStatus,
            error: errorMessage
        }),
        {
            status: respStatus
        }
    );
}
---

<Layout title="Password Reset Check">
    <Header client:visible />
    <div transition:animate="fade" class="flex flex-1 justify-center items-center h-full">
        <PasswordReset id={id} client:visible />
    </div>
</Layout>
